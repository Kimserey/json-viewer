<jsonviewer>
  <div class="border px-3 py-2">

    <h5>
      <a href={ "#example_" + props.title } data-toggle="collapse">
        <span class="mr-1">{ props.title }</span>
      </a>
      <small class="text-muted" if={ props.required }>(required)</small>
    </h5>

    <div
      id={ "example_" + props.title }
      class="row collapse"
      each={ property in Object.entries(props.schema.properties) }>

      <div class="col-3">
        <!-- Property name -->
        <span class="mr-1">{ property[0] }</span>
      </div>

      <div class="col-9">

        <!-- Identifies Object with properties -->
        <div if={ !!property[1].type }>
          <div each={ validations in Object.entries(property[1]) }>
            <small if={ validations[0] === "type" }>
              <span class="mr-1">{ validations[1] }</span>
              <span class="text-muted" if={ props.schema.required.includes(property[0]) }>(required)</span>
            </small>

            <small if={ validations[0] !== "type" } class="text-muted">{ validations[0] }: {validations[1]}</small>
          </div>
        </div>

        <!-- Identifies Reference -->
        <div if={ !!property[1].$ref }>
          <jsonviewer
            title= { getLast(property[1]) }
            required={ true }
            schema={ getDefinition(property[1], props.definitions) }
            definitions={ props.definitions }
          ></jsonviewer>
        </div>

        <!-- Identifies optional Reference -->
        <div if={ !!property[1].oneOf }>
          <div each={ el in property[1].oneOf }>
            <span if={ !!el.$ref }>
              <jsonviewer
                title= { getLast(el) }
                required={ false }
                schema={ getDefinition(el, props.definitions) }
                definitions={ props.definitions }
              ></jsonviewer>
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    export default {
      getLast(el) {
        return el
          .$ref
          .split("/")
          .pop();
      },
      getDefinition(el, definitions) {Â 
        return el
          .$ref
          .split("/")
          .slice(2)
          .reduce((s, c) => s[c], definitions);
      }
    }
  </script>
</jsonviewer>